worker_processes  1;

env SOCKEXEC_SOCKET;

events {
    worker_connections  1024;
}

env DB_HOST;

http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;

  keepalive_timeout  65;

  lua_package_path "/usr/local/openresty/site/lualib/silverkey/?.lua;/usr/local/openresty/nginx/lua/?.lua;;";

  init_worker_by_lua_block {
    local uuid = require 'resty.jit-uuid'
    uuid.seed()
  }

  init_by_lua_block {
    require "resty.core"
    collectgarbage("collect")  -- just to collect any garbage
    encodeJSON = require('cjson.safe').encode
  }

  resolver 127.0.0.11;

  server {
      listen       80;
      server_name  localhost;

      location /artifacts {
        root /opt/silverkey/;
        autoindex on;
      }

      set $template_root /usr/local/openresty/nginx/conf/template;

      location /api/v1 {
        lua_need_request_body on;
        content_by_lua_block {
          local inspect = require "inspect"
          local router = require "router"
          local r = router.new()

          r:match({
            POST = {
              ["/api/v1/team"] = function(params)
                local k8s, err = require("k8s"):new("homecluster")
                local uuid = require 'resty.jit-uuid'
                local backendId = uuid()

                if err then
                  ngx.status = 503
                  ngx.exit(503)
                end

                local res, err = k8s:deployBackend(backendId)

                if err then
                  ngx.status = 503
                  ngx.exit(503)
                else
                  ngx.say(encodeJSON({
                    uuid = backendId,
                    status = "OK",
                    endpoint = "http://somebackend.silverkey.app:3242"
                  }))
                end

              end
            },
            DELETE = {
              ["/api/v1/team/:name"] = function(params)
                local k8s, err = require("k8s"):new("homecluster")

                if err then
                  ngx.status = 503
                  ngx.exit(503)
                end


                local res, err = k8s:destroyBackend(params.name)

                if err then
                  ngx.status = 503
                  ngx.exit(503)
                else
                  ngx.say(encodeJSON({
                    status = "OK"
                  }))
                end
              end
            }
          })

          local ok, errmsg = r:execute(
            ngx.var.request_method,
            ngx.var.request_uri,
            ngx.req.get_uri_args(),  -- all these parameters
            ngx.req.get_post_args(), -- will be merged in order
            {other_arg = 1})         -- into a single "params" table



          if ok then
            ngx.status = 200
          else
            ngx.status = 404
            ngx.say("Not found!")
          end
        }
      }

      location /k8s-test {
        resolver 127.0.0.11;
        set $template_root /usr/local/openresty/nginx/conf/template;
        content_by_lua_block {
          local encodeJSON = require('cjson.safe').encode
          local k8s, err = require('k8s'):new("homecluster")
          if err then
            ngx.status = 503
            ngx.exit(503)
          end
          local res, err = k8s:deployBackend("xxxxx")
          if not err then
            ngx.say(encodeJSON(res))
          end
        }
      }

      location /etcd-test {
        resolver 127.0.0.11;
        content_by_lua_block {
          local encodeJSON = require('cjson.safe').encode
          local etcd = require('etcdsk'):new(os.getenv("DB_HOST"))
          if not etcd then
            ngx.status = 503
            ngx.exit(503)
          end
          local kubeconfig, err = etcd:get("/backend/homecluster/kubeconfig")
          if (err) then
            ngx.status = 503
            ngx.say(err)
            ngx.exit(503)
          end
          ngx.say(encodeJSON(kubeconfig))
        }
      }

      location /version {
        content_by_lua_block {

          local cmd = { "/usr/local/bin/kubectl", "version", "--client" }
          local prog = require 'resty.exec'.new(os.getenv("SOCKEXEC_SOCKET"))
          --prog.timeout_fatal = false
          --prog.argv = cmd

          local res, err = prog({
            argv = cmd,
            timeout_fatal = false
          })
          if (err) then
            ngx.say(err)
          else
            ngx.say(res.stdout)
          end
        }
      }

      location / {
          root   /usr/local/openresty/nginx/html;
          index  index.html index.htm;
      }

  }

}
