worker_processes  1;

env SOCKEXEC_SOCKET;

events {
    worker_connections  1024;
}


http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;

  keepalive_timeout  65;

  lua_package_path "/usr/local/openresty/site/lualib/silverkey/?.lua;/usr/local/openresty/nginx/lua/?.lua;;";

  init_worker_by_lua_block {
    local uuid = require 'resty.jit-uuid'
    uuid.seed()
  }

  init_by_lua_block {
    require "resty.core"
    collectgarbage("collect")  -- just to collect any garbage
  }


  server {
      listen       80;
      server_name  localhost;

      location /artifacts {
        root /opt/silverkey/;
        autoindex on;
      }

      location /k8s-test {
        resolver 127.0.0.11;
        content_by_lua_block {
          local etcd = require('etcdsk'):new(os.getenv("DB_HOST"))
          --ngx.say(etcd:get("kubeconfig"))
          ngx.say("hello world")
        }

      }

      location /etcd-test {
        resolver 127.0.0.11;
        content_by_lua_block {
          local encodeJSON = require('cjson.safe').encode
          local etcd = require('etcdsk'):new(os.getenv("DB_HOST"))
          --local etcd = require('etcdsk'):new("http://staging.silverkey.app-db:2379")
          if not etcd then
            ngx.status = 503
            ngx.exit(503)
          end
          local kubeconfig, err = etcd:get("kubeconfig")
          if (err) then
            ngx.status = 503
            ngx.say(err)
            ngx.exit(503)
          end
          ngx.say(encodeJSON(kubeconfig))
        }
      }

      location /version {
        content_by_lua_block {

          local cmd = { "/usr/local/bin/kubectl", "version", "--client" }
          local prog = require 'resty.exec'.new(os.getenv("SOCKEXEC_SOCKET"))
          --prog.timeout_fatal = false
          --prog.argv = cmd

          local res, err = prog({
            argv = cmd,
            timeout_fatal = false
          })
          if (err) then
            ngx.say(err)
          else
            ngx.say(res.stdout)
          end
        }
      }

      location /api/v1/team {
        set $template_root /usr/local/openresty/nginx/conf/template;
        content_by_lua_block {
          local k8s = require 'silverkey.team'
          k8s.new_backend()
        }
        #content_by_lua_file lua/team.lua;
      }

      location / {
          root   /usr/local/openresty/nginx/html;
          index  index.html index.htm;
      }

  }

}
